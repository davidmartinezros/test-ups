buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
        classpath 'io.gatling:gatling-maven-plugin:2.0.0-RC3'

    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'scala'
//apply plugin: 'gatling'

if (project.getProperty('profile') == 'prod') {
    apply from: 'profile_prod.gradle'
} else if (project.getProperty('profile') == 'test') {
    apply from: 'profile_test.gradle'
} else {
    apply from: 'profile_dev.gradle'
}

jar {
    baseName = 'MAXDrive'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
    maven {
        url 'http://repository.excilys.com/content/groups/public'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {

    compile fileTree(dir: "./libs", includes: ["*.jar"])

    compile("org.springframework.statemachine:spring-statemachine-core:1.0.0.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-web") {
//        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    }
//    compile("org.springframework.boot:spring-boot-legacy:1.0.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb") {
        exclude module: 'mongo-java-driver'
    }
    compile("org.springframework.boot:spring-boot-starter-velocity")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-starter-batch")
    compile("org.springframework.boot:spring-boot-actuator")
    compile("org.springframework.security:spring-security-cas:3.2.5.RELEASE")

    compile("org.jasig.cas.client:cas-client-core:3.3.3")

    compile "com.github.mongobee:mongobee:0.10"
    compile "org.mongeez:mongeez:0.9.6"
    compile 'org.javers:javers-spring-boot-starter-mongo:1.5.1'
    compile 'org.mongodb:mongo-java-driver:3.0.4'

//    compile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.0'
//    compile 'cz.jirutka.spring:embedmongo-spring:1.3.1'
//    compile 'org.hsqldb:hsqldb:2.3.3'

    compile 'commons-fileupload:commons-fileupload:1.3.1'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.apache.httpcomponents:httpcore:4.4.4'

    compile 'fr.ippon.spark.metrics:metrics-spark-reporter:1.2'
    compile 'com.ryantenney.metrics:metrics-spring:3.0.4'
    compile 'io.dropwizard.metrics:metrics-graphite:3.1.2'
    compile 'io.dropwizard.metrics:metrics-core:3.1.2'
    compile 'io.dropwizard.metrics:metrics-servlet:3.1.2'
    compile 'io.dropwizard.metrics:metrics-servlets:3.1.2'
    compile 'io.dropwizard.metrics:metrics-jvm:3.1.2'

    compile 'io.springfox:springfox-swagger2:2.0.3'

    compile 'fi.solita.clamav:clamav-client:1.0.0'
    compile 'javax.inject:javax.inject:1'
    compile 'fr.norad.logback.prettier:logback-prettier:0.5'
//    compile "com.h2database:h2"
    compile "org.json:json:20140107"
    compile "joda-time:joda-time"
    compile "joda-time:joda-time-hibernate:1.3"

    compile("net.sourceforge.nekohtml:nekohtml:1.9.21")

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
    testCompile("org.springframework:spring-test:4.1.7.RELEASE")
    testCompile("org.mockito:mockito-core:")
    testCompile 'com.jayway.awaitility:awaitility:1.4.0'
    testCompile 'com.jayway.jsonpath:json-path'
    testCompile 'cz.jirutka.spring:embedmongo-spring:1.3.0'
    testCompile 'com.excilys.ebi.gatling.highcharts:gatling-charts-highcharts:1.4.3'
//    testCompile 'o.gatling.highcharts:gatling-charts-highcharts:2.1.5'
    testCompile 'org.assertj:assertj-core-java8:1.0.0m1'

}

//mainClassName = 'gov.max.service.file.Application'

task gatling(dependsOn: 'compileTestScala') << {
    logger.lifecycle(" ---- Executing all Gatling scenarios from: ${sourceSets.test.output.classesDir} ----")
    sourceSets.test.output.classesDir.eachFileRecurse { file ->
        if (file.isFile()) {
            //Remove the full path, .class and replace / with a .
            logger.debug("Tranformed file ${file} into")
            def gatlingScenarioClass = (file.getPath() - (sourceSets.test.output.classesDir.getPath() + File.separator) - '.class')
                    .replace(File.separator, '.')

            logger.debug("Tranformed file ${file} into scenario class ${gatlingScenarioClass}")
            javaexec {
                // I do not use this so
                main = 'com.excilys.ebi.gatling.app.Gatling'
                classpath = sourceSets.test.output + sourceSets.test.runtimeClasspath
                args  '-sbf',
                        sourceSets.test.output.classesDir,
                        '-s',
                        gatlingScenarioClass,
                        '-rf',
                        'build/reports/gatling'
            }
        }
    }

    logger.lifecycle(" ---- Done executing all Gatling scenarios ----")
}


task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

task stage(type: Copy, dependsOn: [clean, assemble]) {
    from jar.archivePath
    into project.rootDir
    rename {
        'app.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('app.jar').delete()
}
